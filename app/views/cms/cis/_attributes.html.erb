<div class="ciAttributes">
  <% ci_attributes   = ci.ciAttributes
     base_attrs      = ci.respond_to?(:ciBaseAttributes) && ci.ciBaseAttributes
     sticky_map      = ci.respond_to?(:ciAttrProps) && ci.ciAttrProps.respond_to?(:owner)
     meta_attributes = ci.meta.attributes[:mdAttributes] %>
  <%= f.fields_for :ciAttributes, ci_attributes do |c| %>
    <% if defined?(only)
         only_map = only.inject({}) {|m, name| m[name.to_s] = name; m}
         meta_attributes = meta_attributes.select {|a| only_map.include?(a.attributeName)}
       end %>
    <% meta_attributes.group_by { |a| a.options.has_key?(:category) ? a.options[:category] : 'Attributes' }.sort.each do |category, attribute_list| %>
      <div class="category">
      	<div class="name"><%= category.split('.').last %></div>
    		<% attribute_list.sort_by {|a| a.options.has_key?(:order) ? a.options[:order] : 999 }.each do |a| %>
  		   	<div class="control-group">
            <% if a.options.has_key?(:help) %>
              <%= c.label a.attributeName, link_to(a.description + (a.isMandatory ? '*' : ''), '#', :tabindex => '-1', :rel => 'tooltip', :title => "#{a.options[:help]}"), :class => 'control-label' %>
            <% else %>
              <%= c.label a.attributeName, a.description + (a.isMandatory ? '*' : ''), :class => 'control-label' %>
            <% end %>
            <% ci_attributes.attributes[a.attributeName] = a.defaultValue unless ci_attributes.attributes.include?(a.attributeName) %>
            <% read_only = ci.respond_to?(:ciId) && ci.ciId.to_i > 0 && a.options.has_key?(:editable) && !a.options[:editable] %>
            <div class="controls" editable="<%= !read_only %>">
              <% if sticky_map %>
                <div class="input-prepend">
                  <%= render 'cms/cis/sticky',
                             :name      => "#{f.object_name}[ciAttrProps][owner][#{a.attributeName}]",
                             :value     => ci.ciAttrProps.owner.attributes[a.attributeName],
                             :read_only => read_only && !ci.ciClassName.start_with?('catalog.') %>
              <% end %>
              <% pattern         = a.options[:pattern]
                 required        = a.isMandatory ? true : nil
                 attribute_value = ci_attributes.send(a.attributeName)
                 placeholder     = a.isMandatory && attribute_value.blank? ? 'this field is required' : nil
                 data_type       = a.dataType %>
              <% case data_type %>
              <% when 'enum' %>
                <%= c.select a.attributeName, options_for_select(eval(a.valueFormat), attribute_value), :class => 'select-xlarge' %>
              <% when 'code' %>
                <%= c.text_area a.attributeName, :class => 'input-xlarge text', :required => required, :placeholder => placeholder %>
              <% when 'boolean' %>
                <%= render 'cms/cis/checkbox',
                           :attribute_name  => a.attributeName,
                           :attribute_value => attribute_value,
                           :builder         => c,
                           :id => "#{a.attributeName}_#{(ci.respond_to?(:ciId) && ci.ciId) || 0}" %>
              <% when 'text' %>
                <%= c.text_area a.attributeName, :class => 'input-xlarge text', :required => required, :placeholder => placeholder, :pattern => pattern %>
              <% when 'struct' %>
                <%= render "cms/cis/#{ci.ciClassName.split('.').last.downcase}/#{a.attributeName.downcase}",
                               :attribute_name  => a.attributeName,
                               :attribute_value => attribute_value,
                               :ci              => ci,
                               :builder         => c,
                               :options         => a.options %>
              <% when 'array' %>
                <%= render 'cms/cis/array_attribute',
                           :attribute_name  => a.attributeName,
                           :attribute_value => attribute_value,
                           :builder         => c %>
              <% when 'hash' %>
              	<% allow_add = a.options.include?(:allow_add) ? a.options[:allow_add] : true %>
              	<% allow_delete = a.options.include?(:allow_delete) ? a.options[:allow_delete] : true %>
                <%= render 'cms/cis/hash_attribute',
                           :attribute_name  => a.attributeName,
                           :attribute_value => attribute_value,
                           :fixed_keys => a.options[:fixed_keys],
                           :allow_add => allow_add,
                           :allow_delete => allow_delete,
                           :builder         => c %>
              <% else %>
                <% if a.isEncrypted %>
                  <div class="input-append">
                  <%= c.password_field(a.attributeName,
                                       :value        => attribute_value,
                                       :class        => "input-xlarge encrypted",
                                       :autocomplete => 'off',
                                       :required     => required,
                                       :placeholder  => placeholder) %>
                  <span class="check-box add-on <%= 'muted' if attribute_value == '--ENCRYPTED--' %>">
                    <small><%= icon('square-o', 'show typing', 'show-typing fa-lg fa-fw') %></small>
                  </span>
                </div>
                <% else %>
                  <% if a.options.has_key?(:form) %>
                    <% case a.options[:form][:field] %>
                      <% when 'textarea' %>
                        <%= c.text_area a.attributeName, :class => 'input-xlarge text', :required => required, :placeholder => placeholder, :pattern => pattern %>
                      <% when 'checkbox' %>
                        <% if a.options[:form][:multiple] == 'true' %>
                          <%= render 'cms/cis/multiselect',
                                     :attribute_name     => a.attributeName,
                                     :attribute_value    => attribute_value,
                                     :options_for_select => a.options[:form][:options_for_select],
                                     :builder            => c %>
                        <% else %>
                          <%= render 'cms/cis/checkbox',
                                     :attribute_name  => a.attributeName,
                                     :attribute_value => attribute_value,
                                     :builder         => c,
                                     :id => "#{a.attributeName}_#{(ci.respond_to?(:ciId) && ci.ciId) || 0}" %>
                        <% end %>
                      <% when 'select' %>
                        <%= c.select(a.attributeName, options_for_select(a.options[:form][:options_for_select], attribute_value), {}, :class => 'select-xlarge') %>
                      <% else %>
                        <%= c.text_field a.attributeName, :class => 'input-xlarge', :required => required, :placeholder => placeholder, :pattern => pattern %>
                      <% end %>
                  <% else %>
                    <%= c.text_field a.attributeName, :class => 'input-xlarge', :required => required, :placeholder => placeholder, :pattern => pattern %>
                  <% end %>
                <% end %>
              <% end %>
              <% if sticky_map %>
                </div>
              <% end %>
              <% if a.options.has_key?(:tip) %>
                <% tip = a.options[:tip] %>
                <% if tip.present? %>
                  <span class="help-block"><%= a.options[:tip] %></span>
                <% end %>
              <% end %>

              <% if base_attrs %>
                <% base_value = ci.ciBaseAttributes.attributes[a.attributeName] %>
                <div class="diff-container hide">
                  <div class="title">Base Value Diff</div>
                  <% if base_value && base_value != attribute_value %>
                    <% json = data_type == 'hash' || data_type == 'array' || data_type == 'struct' %>
                    <pre class="changed hide"><%= json && attribute_value.present? ? JSON.pretty_unparse(JSON.parse(attribute_value)) : attribute_value  %></pre>
                    <pre class="original hide"><%= json && base_value.present? ? JSON.pretty_unparse(JSON.parse(base_value)) : base_value %></pre>
                    <pre class="diff hide"></pre>
                  <% else %>
                    no changes
                  <% end %>
                </div>
              <% end %>
            </div>
          </div>
		    <% end %>
	    </div>
    <% end %>
  <% end %>
</div>
<script type="text/javascript">
  $j('.control-label a').tooltip();
  $j('.controls textarea').textareafullscreen({overlay: true, maxWidth: '80%', maxHeight: '80%'});

  $j("input.encrypted").on('keypress paste', function(e) {
    var parent = $j(e.target).parents(".controls"),
        span = parent.find("span.check-box"),
        input = parent.find("input.encrypted");
    if (input.val() == '--ENCRYPTED--') {
      input.val('');
    }
    span.removeClass('muted');
  });

  $j("input.encrypted").on('click', function(e) {
    this.select();
  });

  $j("input.encrypted").on('focusout', function(e) {
    var input = $j(e.target),
        cb = input.parents(".controls").find('i.show-typing');
    setTimeout(function() {
      if (!input.is(":focus")) {
        input.attr('type', 'password');
        cb.removeClass('fa-check-square-o').addClass('fa-square-o');
      }
    }, 1000);
  });

  $j("i.show-typing").parents('span').click(function(e) {
    var target = $j(this),
        input  = target.parents(".controls").find("input.encrypted");
    if (input.val() == '--ENCRYPTED--') {
      return;
    }

    var cb = target.find('i.show-typing');
    if (cb.hasClass('fa-square-o')) {
      input.attr('type', 'text');
      cb.addClass('fa-check-square-o').removeClass('fa-square-o');
    }
    else {
      input.attr('type', 'password');
      cb.addClass('fa-square-o').removeClass('fa-check-square-o');
    }
    input.select();
  });

  window.toggleBaseDiff = function(source) {
    var link = $j(source),
        form = link.parents("form"),
        containers = form.find(".ciAttributes .diff-container");
    link.html(containers.is(":visible") ? "Show" : "Hide");
    containers.toggle();
    containers = form.find(".ciAttributes .diff-container:not(.calculated)");
    setTimeout(function() {
      containers.prettyTextDiff({cleanup: true});
      containers.find(".diff").show();
      containers.addClass('calculated');
    }, 100);
  };

  var filters = {};
  <% ci.meta.attributes[:mdAttributes].each do |a| %>
    <% filter = a.options[:filter] %>
    <%# This is just an example:   filter = {"new" => {"editable" => "scm:neq:git", "visible" => "scm:eq:svn"}, "edit" => {"visible" => "scm:eq:svn"}} if a.attributeName == 'repository' %>
    <%# This is just an example:   filter = {"all" => {"editable" =>  "autorepair:eq:true"}} if a.attributeName == 'autoscale' %>

    <%# filter = {"all" => {"visible" => "size:eq: M && (ostype:eq:redhat-6.4 || ostype : eq : redhat-6.2 )", "editable" => "ostype:neq:redhat-6.2"}} if a.attributeName == 'image_id' %>
    <% if filter.present? %>
      filters["<%= a.attributeName %>"] = <%= raw(filter.to_json) %>;
    <% end %>
  <% end %>

  var idPrefix = "#<%= f.object_name %>_ciAttributes_";

  var toggleAttrVisible = function(name, visible) {
    var controlGroup = $j(".control-group:has(" + idPrefix + name + ")");
    controlGroup[visible ? "show" : "hide"]();
    var controlDiv = controlGroup.parents(".category");
    var hasVisible = controlDiv.find(".control-group").toArray().some(function (el) {
      return el.style.display != 'none';
    });
    controlDiv[hasVisible ? "show" : "hide"]();
  };

  var toggleAttrEditable = function(name, editable) {
    var controlDiv = $j(".controls:has(" + idPrefix + name + ")");
    controlDiv.attr("editable", "" + editable);
    var editFormDiv = controlDiv.parents(".edit_form");
    var editForm    = editFormDiv.find(".editing");
    if (editForm.length) {
      disable_edit(editFormDiv[0].id);
      enable_edit(editFormDiv[0].id);
    }
  };

  var commited = <%= ci.commited? ? 'true' : 'false' %>;
  $j.each(Object.keys(filters), function(i, attr) {
    var filter = filters[attr],
        scope  = commited ? (filter['edit'] || filter['all']) : (filter['new'] || filter['all']);
    if (scope) {
      $j.each({"visible": toggleAttrVisible, "editable": toggleAttrEditable},
        function(behaviour, fn) {
          var behaviourDef = scope[behaviour];
          if (behaviourDef) {
            if (behaviourDef == 'false') {
              fn(attr, false);
            }
            else {
              try {
                var watchElements = [];
                var evalExpr = behaviourDef.split(/\s*(\&\&|\|\|)\s*/).map(function (condition) {
                  var watchExpr = condition.split(':');
                  if (watchExpr.length > 2) {
                    var attr     = watchExpr[0].gsub(/^\s*(\(\s*)+\s*/, ''),
                        operator = watchExpr[1].trim(),
                        value    = watchExpr[2].gsub(/\s*(\)\s*)+\s*$/, '');
                    var watchId = idPrefix + attr.trim();
                    watchElements.push(watchId);
                    return watchExpr[0].gsub(attr, "encodeURI($j('" + watchId + "').val()) ") +
                        (operator.trim().toLowerCase() == 'eq' ? "== " : "!= ") +
                        watchExpr[2].gsub(value, "'" + encodeURI(value.trim()) + "'");
                  }
                  else {
                    return watchExpr;
                  }
                }).join(' ');
                var toggleFn = function () {
                  fn(attr, eval(evalExpr));
                };
                $j(watchElements.join(", ")).change(toggleFn);
                toggleFn();
              } catch (e) {
                console.log('Failed to configure filter for: ' + behaviourDef);
                console.log(e);
              }
            }
          }
        }
      );
    }
  });
</script>
